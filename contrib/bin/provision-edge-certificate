#!/usr/bin/env bash
#
# @(#) provision-edge-certificate
#
# Copyright Â© 2022 Revolution Robotics, Inc.
#
# SYNOPSIS
#     provision-edge-certificate OPTIONS -d | --dest-name=HOST
#
# DESCRIPTION
#     This script provisions a TLS certificate - either a new or an
#     existing one - from a certificate authority and installs it on
#     the given HOST. The HOST certificate must be added separately to
#     the API server's database.
#
#     It's assumed that the caller of this script has passwordless
#     access to both HOST and certificate authority server. SSH_CMD host
#     shortcuts are recommended. E.g., if the file ${ssh_dir}/config
#     contains:
#
#         Host iomix
#             Hostname revoedge-f0bb05.local
#             User root
#
#         Host cloudapi
#             Hostname cloudapi.revo.io
#             User revo
#
#      then the script may be invoked as:
#
#          provision-edge-certificate --dest-name=iomix --ca-name=cloudapi
#
#       By convention, certificates expire in 13 months (398 days).
#       Use option `-s duration' to specify a different lifespan.
#       For example, to issue a 10-year certificate:
#
#          provision-edge-certificate -d iomix -c cloudapi -s 87660h
#
# Exit immediately on errors.

: ${AWK_CMD:='/usr/bin/awk'}
: ${CAT_CMD:='/bin/cat'}
: ${CP_CMD:='/bin/cp'}
: ${DIG_CMD:='/usr/bin/dig'}
: ${GETOPT_CMD:='/usr/bin/getopt'}
: ${INSTALL_CMD:='/usr/bin/install'}
: ${MKTEMP_CMD:='/usr/bin/mktemp'}
: ${SORT_CMD:='/usr/bin/sort'}
: ${READLINK_CMD:='/bin/readlink'}
: ${RM_CMD:='/bin/rm'}
: ${SCP_CMD:='/usr/bin/scp'}
: ${SSH_CMD:='/usr/bin/ssh'}
: ${SSH_COPY_ID_CMD:='/usr/bin/ssh-copy-id'}
: ${SSH_KEYGEN_CMD:='/usr/bin/ssh-keygen'}
: ${SSH_KEYSCAN_CMD:='/usr/bin/ssh-keyscan'}
: ${SUDO_CMD:='/usr/bin/sudo'}

usage ()
{
    local -n args=$1

    $CAT_CMD >&2 <<EOF
Usage: $script_name OPTIONS --dest-name HOST
where OPTIONS are:
  -h|--help  Display this help, then exit.
  -d|--dest-name=NAME
             Set NAME of destination host.
  -l|--dest-login=LOGIN
             Set SSH_CMD LOGIN to destination host (default: "${args[dest-login]}")
  -u|--dest-user=USER
             Set destination USER name (default: ${args[dest-user]})
  -c|--ca-name=NAME
             Set NAME of certificate authority (default: ${args[ca-name]})
  -k|--ca-login=LOGIN
             Set SSH_CMD LOGIN to certificate authority (default: "${args[ca-name]}")
  -o|--ca-owner=OWNER
             Set OWNER of certificate authority (default: ${args[ca-owner]})
  -s|--cert-lifespan=DURATION
             Set DURATION of a new certificate
EOF
}

verify-input ()
{
    local prompt=$1

    local reply=''

    while [[ ! ."$reply" =~ \.([yY]|[nN]) ]]; do
        read -N 1 -p "$prompt" reply
        echo >&2
    done

    case $reply in
        [yY])
            return 0
            ;;
        [nN])
            return 1
            ;;
    esac
}

clean-known_hosts ()
{
    declare host=$(ssh-host "$1")

    declare ip
    declare -a ips
    declare hostname
    declare -a hostnames

    if test ! -f "$HOME/.ssh/known_hosts"; then
        return
    fi

    if test ! -f "$HOME/.ssh/known_hosts"; then
        return
    fi

    echo "${script_name}: removing stale SSH_CMD keys from known_hosts..."
    $SSH_KEYGEN_CMD -f "$HOME/.ssh/known_hosts" -R "$host"

    # IPv4 address?
    if [[ ."$host" =~ \.([0-9]+\.){3}[0-9]+$ ]]; then
        mapfile -t hostnames < <($DIG_CMD +short -x "$host")

        # No hostnames returned...
        if (( ${#hostnames[*]} == 0 )); then

            # Try link-local reverse query.
            mapfile -t hostnames < <($DIG_CMD +short +noedns -p 5353 @224.0.0.251 -x "$host")
        fi

        for hostname in "${hostnames[@]}"; do
            $SSH_KEYGEN_CMD -f "$HOME/.ssh/known_hosts" -R "${hostname%.}"
        done
    else
        mapfile -t ips < <($DIG_CMD +short "$host")

        # No IPs returned...
        if (( ${#ips[*]} == 0 )); then

            # Try link-local query.
            mapfile -t ips < <($DIG_CMD +short +noedns -p 5353 @224.0.0.251 "$host")
        fi
        for ip in "${ips[@]}"; do
            $SSH_KEYGEN_CMD -f "$HOME/.ssh/known_hosts" -R "$ip"
        done
    fi
}

initialize-profile ()
{
    local -n argv=$1

    local hostname=''
    local username=''
    local host=''

    if [[ ."${argv[dest-name]}" =~ \.([^@]+@)?([^:]+)(:[^:]+)? ]]; then
        host=${BASH_REMATCH[2]}

        hostname=$(
            $SSH_CMD -G "$host" |
                $AWK_CMD '/^hostname/ { printf $2 }'
                ) || return $?
        username=$(
            $SSH_CMD -G "${argv[dest-name]}" |
                $AWK_CMD '$1 == "user" { printf $2 }'
                ) || return $?

        argv[dest-sship]=$hostname

        if test ."${argv[dest-login]}" = .''; then
            argv[dest-login]=$username
        fi
    else
        username=${argv[dest-name]%@*}

        if test ."${argv[dest-login]}" = .''; then
            argv[dest-login]=$username
        fi

        if $SSH_CMD "${argv[dest-login]}@${argv[dest-name]##*@}" true 2>/dev/null; then
            argv[dest-sship]=${argv[dest-name]##*@}
        fi
    fi

    hostname=''
    username=''
    host=''

    if [[ ."${argv[ca-name]}" =~ \.([^@]+@)?([^:]+)(:[^:]+)? ]]; then
        host=${BASH_REMATCH[2]}

        hostname=$(
            $SSH_CMD -G "$host" |
                $AWK_CMD '/^hostname/ { printf $2 }'
                )
        username=$(
            $SSH_CMD -G "${argv[ca-name]}" |
                $AWK_CMD '$1 == "user" { printf $2 }'
                )

        argv[ca-sship]=$hostname

        if test ."${argv[ca-login]}" = .''; then
            argv[ca-login]=$username
        fi
    else
        username=${argv[ca-name]%@*}

        if test ."${argv[ca-login]}" = .''; then
            argv[ca-login]=$username
        fi

        if $SSH_CMD "${argv[ca-login]}@${argv[ca-name]##*@}" true 2>/dev/null; then
            argv[ca-sship]=${argv[ca-name]##*@}
        fi
    fi

    if test ."${argv[dest-sship]}" = .'' -o ."${argv[dest-login]}" = .'' \
            -o ."${argv[ca-sship]}" = .'' -o ."${argv[ca-login]}" = .''; then
        usage
        return 1
    fi

    local dest_sship

    # Prefer FQDN published on DNS server.
    dest_sship=$(
        $DIG_CMD +short "${argv[dest-sship]}" A |
            $TAIL_CMD -n 1
          ) || return $?

    if [[ ."$dest_sship" =~ ^\.([[:digit:]]{1,3}\.){3}([[:digit:]]{1,3})$ ]]; then
        argv[dest-fqdn]=${argv[dest-sship]}
        return
    fi

    hostname=''
    local domain=''
    local fqdn=''

    domain=$(
        $SSH_CMD "${argv[dest-login]}@${argv[dest-sship]}" 'hostname --domain 2>/dev/null'
          ) || return $?
    fqdn=$(
        $SSH_CMD "${argv[dest-login]}@${argv[dest-sship]}" 'hostname --fqdn 2>/dev/null'
        ) || return $?
    hostname=$(
        $SSH_CMD "${argv[dest-login]}@${argv[dest-sship]}" 'echo $HOSTNAME'
            ) || return $?

    if [[ ! ."$fqdn" =~ ^\.[^.]+$ ]]; then
        argv[dest-fqdn]=$fqdn
    elif [[ ."$hostname" =~ ^\.[^.]+$ ]] \
             && test ."$domain" != .'' \
             && test ."$hostname" != ."$domain"; then
        argv[dest-fqdn]=${hostname}.${domain}
    elif [[ ! ."$hostname" =~ ^\.[^.]+$ ]]; then
        argv[dest-fqdn]=$hostname
    else
        argv[dest-fqdn]=${argv[dest-sship]}
    fi
}

cache-remote-keys ()
{
    local remote_sship=$1

    local known_hosts=''
    local known_hosts_dir=''
    local tmpfile=''

    known_hosts=$(
        $SSH_CMD -G "$HOSTNAME" |
            $AWK_CMD '/^userknownhostsfile/ { print $2 }'
               ) || return $?
    known_hosts_dir=${known_hosts%/*}
    tmpfile=$($MKTEMP_CMD "${known_hosts_dir}/${FUNCNAME[0]}.XXXXXXX") || return $?

    trap '$RM_CMD -f "$tmpfile"; exit' 0 1 2 15 RETURN

    if test -f "$known_hosts"; then
        $CP_CMD "$known_hosts" "$tmpfile"
    fi

    if ! $SSH_KEYSCAN_CMD -H  "$remote_sship" 2>/dev/null >>"$tmpfile"; then
        echo "${script_name}: ${remote_sship}: Host is unreachable" >&2
        return 1
    fi

    $SORT_CMD -u < "$tmpfile" >"$known_hosts"
    $RM_CMD -f "$tmpfile"

    trap - 0 1 2 15 RETURN
}

maybe-issue-certificate ()
{
    local -n argv=$1

    local cert_src=~${argv[ca-owner]}/.step/issued/${argv[dest-fqdn]}

    if ! $SSH_CMD "${argv[ca-login]}@${argv[ca-sship]}" \
         "sudo test -f \"\$(readlink -e ${cert_src}.crt)\" -a \
                    -f \"\$(readlink -e ${cert_src}.key)\""; then
        $SSH_CMD "${argv[ca-login]}@${argv[ca-sship]}" \
                 "sudo -i -u \"${argv[ca-owner]}\" issue-tls-certificate -f \"${argv[dest-fqdn]}\" -d \"${argv[cert-lifespan]}\""
    fi
}

transfer-certificate ()
{
    local -n args=$1

    local cert_suffix=$2
    local cert_destdir=$3

    local dest_host=${args[dest-fqdn]%%.*}
    local cert_src=~${args[ca-owner]}/.step/issued/${args[dest-fqdn]}
    local cert_dest=~${args[dest-user]}/.step

    local tmp_src=''
    local tmp_dest=''

    tmp_src=$($SSH_CMD "${args[ca-login]}@${args[ca-sship]}" mktemp) || return $?
    tmp_dest=$($SSH_CMD "${args[dest-login]}@${args[dest-sship]}" mktemp) || return $?

    $SSH_CMD "${args[dest-login]}@${args[dest-sship]}" \
             "rm -f ${tmp_dest}" \
        || return $?

    trap "$SSH_CMD ${args[ca-login]}@${args[ca-sship]} 'sudo rm -f ${tmp_src}'; $SSH_CMD ${args[dest-login]}@${args[dest-sship]} 'rm -f ${tmp_dest}'; exit" 0 1 2 15

    $SSH_CMD "${args[ca-login]}@${args[ca-sship]}" \
             "sudo cp -a ${cert_src}.${cert_suffix} ${tmp_src}" \
        || return $?
    $SSH_CMD "${args[ca-login]}@${args[ca-sship]}" \
             "sudo chown ${args[ca-login]} ${tmp_src}" \
        || return $?
    $SCP_CMD -3 "${args[ca-login]}@${args[ca-sship]}:${tmp_src}" \
             "${args[dest-login]}@${args[dest-sship]}:${tmp_dest}" \
        || return $?
    $SSH_CMD "${args[dest-login]}@${args[dest-sship]}" \
             "sudo install -d -m 0700 ${cert_dest}/${cert_destdir}" \
        || return $?
    $SSH_CMD "${args[dest-login]}@${args[dest-sship]}" \
             "sudo cp -a ${tmp_dest} ${cert_dest}/${cert_destdir}/${args[dest-fqdn]}.${cert_suffix}" \
        || return $?
    $SSH_CMD "${args[dest-login]}@${args[dest-sship]}" \
             "sudo chown -R ${args[dest-user]}:${args[dest-user]} ${cert_dest}" \
        || return $?
    $SSH_CMD "${args[dest-login]}@${args[dest-sship]}" \
             "sudo ln -sf ${args[dest-fqdn]}.${cert_suffix} ${cert_dest}/${cert_destdir}/${dest_host}.${cert_suffix}" \
        || return $?

    $SSH_CMD "${args[ca-login]}@${args[ca-sship]}" \
             "sudo rm -f ${tmp_src}" \
        || return $?
    $SSH_CMD "${args[dest-login]}@${args[dest-sship]}" \
             "rm -f ${tmp_dest}" \
        || return $?

    trap - 0 1 2 15
}

install-certificates ()
{
    local -n argv=$1

    echo "${script_name}: ${dest_fqdn}: installing public TLS certificate." >&2
    transfer-certificate argv 'crt' 'certs'

    echo "${script_name}: ${dest_fqdn}: installing private TLS certificate." >&2
    transfer-certificate argv 'key' 'secrets'
}

parse-options ()
{
    local -n argv=$1

    local opts
    local status
    local -r short_opts=d:,l:,u:,c:,k:,o:,s:,h
    local -r long_opts=dest-name:,dest-login:,dest-user:,ca-name:,ca-login:,ca-owner:,cert-lifespan:,help

    opts=$(
        $GETOPT_CMD --name "$script_name" --options "$short_opts"  \
                    --longoptions "$long_opts" -- "${@:2}"
        )

    status=$?
    if (( status != 0 )); then
        return $status
    fi

    eval set -- "$opts"

    while true; do
        case "$1" in
            -h|--help)
                usage argv
                return 1
                ;;
            -d|--dest-name)
                argv[dest-name]=$2
                ;;
            -l|--dest-login)
                argv[dest-login]=$2
                ;;
            -u|--dest-user)
                argv[dest-user]=$2
                ;;
            -c|--ca-name)
                argv[ca-name]=$2
                ;;
            -k|--ca-login)
                argv[ca-login]=$2
                ;;
            -o|--ca-owner)
                argv[ca-owner]=$2
                ;;
            -s|--cert-lifespan)
                if [[ ."$2" =~ \.[0-9]+(ns|us|ms|s|m|h) ]]; then
                    argv[cert-lifespan]=$2
                else
                    echo "$script_name: $2: Invalid duration."
                    echo "Allowed time units: ns, us, ms, s, m, h."
                    usage argv
                    return 1
                fi
                ;;
            --)
                break
                ;;
        esac
        shift 2
    done

    if test ."${argv[dest-name]}" = .''; then
        echo "$script_name: hostname: Required argument"
        usage argv
        return 1
    fi
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=$($READLINK_CMD -e $0)
    declare script_name=${script##*/}
    declare script_dir=${script%/*}
    declare ssh_dir=${HOME}/.ssh

    declare -A profile=(
        [dest-name]=''
        [dest-login]=''
        [dest-user]=postgres
        [ca-name]=cloudapi.slewsys.org
        [ca-login]=alm
        [ca-owner]=step
        [cert-lifespan]=9552h
    )

    parse-options profile "$@" || exit $?

    echo "***** Getting profiles for ${profile[dest-name]} and ${profile[ca-name]}." >&2
    initialize-profile profile || exit $?

    # clean-known_hosts "${profile[dest-name]}"

    echo "***** Caching ${profile[dest-sship]}'s SSH_CMD public keys." >&2
    cache-remote-keys "${profile[dest-sship]}" || exit $?

    $SSH_COPY_ID_CMD "${profile[dest-login]}@${profile[dest-sship]}"

    echo "***** Caching ${profile[ca-sship]}'s SSH_CMD public keys." >&2
    cache-remote-keys "${profile[ca-sship]}" || exit $?

    echo "***** ${profile[dest-fqdn]}: maybe issue TLS certificate..." >&2
    maybe-issue-certificate profile || exit $?

    echo "***** ${profile[dest-fqdn]}: deploying TLS certificate..." >&2
    install-certificates profile || exit $?

    echo "***** TLS certificate provisioning complete!"
fi
