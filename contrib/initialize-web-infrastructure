#!/usr/bin/env bash
#
# initialize-web-infrastructure
#
# Copyright Â© 2022 Revolution Robotics, Inc.
#
# SYNOPSIS
#
#     initialize-web-infrastructure [APP-NAME [APP-OWNER]]
#
: ${BASH_CMD:='/bin/bash'}
: ${CHMOD_CMD:='/usr/bin/chmod'}
: ${CUT_CMD:='/usr/bin/cut'}
: ${ED_CMD:='/usr/local/bin/ed'}
: ${GETENT_CMD:='/usr/bin/getent'}
: ${GREP_CMD:='/usr/bin/grep'}
: ${READLINK_CMD:='/usr/bin/readlink'}
: ${RESTORECON_CMD:='/usr/sbin/restorecon'}
: ${SEMANAGE_CMD:='/usr/sbin/semanage'}
: ${SUDO_CMD:='/usr/bin/sudo'}

run-once ()
{
    local func=$1
    local -n _profile=$2

    if test ! -f "${_profile[state-file]}" \
            || ! $GREP_CMD -q "^${func}\$" "${_profile[state-file]}"; then
        $func "${@:2}" || return $?
        echo "$func" >>"${_profile[state-file]}"
    fi
}

verify-input ()
{
    local prompt=$1

    local reply=''

    while [[ ! ."$reply" =~ \.([yY]|[nN]) ]]; do
        read -N 1 -p "$prompt" reply
        echo >&2
    done

    case $reply in
        [yY])
            return 0
            ;;
        [nN])
            return 1
            ;;
    esac
}

get-app-name ()
{
    local app_name=''
    local app_name_prompt="Enter app name: "

    read -p "$app_name_prompt" app_name
    while test ."$app_name" = .'' \
            || ! verify-input  "App's name is: ${app_name} - Correct (y|n)? "; do
        read -p "$app_name_prompt" app_name
    done

    echo "$app_name"
}

get-app-owner ()
{
    local -n settings=$1

    local app_owner=''
    local app_owner_prompt="Enter username of app ${settings[app-name]}'s owner: "

    read -p "$app_owner_prompt" app_owner
    while test ."$app_owner" = .'' \
            || ! verify-input  "${settings[app-name]}'s owner is: ${app_owner} - Correct (y|n)? "; do
        read -p "$app_owner_prompt" app_owner
    done

    echo "$app_owner"
}

initialize-profile ()
{
    local -n profile=$1

    if test ."${profile[app-name]}" = .''; then
        profile[app-name]=$(get-app-name) || return $?
    fi

    if test ."${profile[app-owner]}" = .''; then
        profile[app-owner]=$(get-app-owner profile) || return $?
    fi

    local app_parent_dir=''

    if ! app_parent_dir=$(
            $GETENT_CMD passwd "${profile[app-owner]}" | $CUT_CMD -d: -f6
         ) || test ! -d "$app_parent_dir"; then
        echo "$script_name: ${profile[app-owner]}: Missing system account." >&2
        return 1
    fi

    if test ! -d "${app_parent_dir}/${profile[app-name]}"; then
        echo "$script_name: ${app_parent_dir}/${profile[app-name]}: No such file or directory." >&2
        return 1
    fi

    profile[app-parent-dir]=${app_parent_dir}
    profile[app-dir]=${app_parent_dir}/${profile[app-name]}
}


install-ruby-dependencies ()
{
    local -n profile=$1

    echo "*** Installing Ruby dependencies..." >&2
    $SUDO_CMD -i -u "${profile[app-owner]}" \
          gem install bundler \
          || return $?
    $SUDO_CMD -i -u "${profile[app-owner]}" \
          "${profile[app-dir]}/bin/bundle" install \
          || return $?
}

install-node-dependencies ()
{
    local -n profile=$1

    echo "*** Installing Node dependencies..." >&2
    $SUDO_CMD -i -u "${profile[app-owner]}" \
          RAILS_ENV=production "${profile[app-dir]}/bin/rake" -C "${profile[app-dir]}" yarn:install \
        || return $?
}

generate-rails-credentials ()
{
    local -n profile=$1

    echo "*** Generating Rails credentials..." >&2
    $SUDO_CMD -i -u "${profile[app-owner]}" \
          sops exec-env "${profile[app-dir]}/config/database-secrets.sops.yml" \
          "cd ${profile[app-dir]} && EDITOR=ed '${profile[app-dir]}/bin/rails'  \
              credentials:edit \
              <<<$'r !envsubst <${profile[app-dir]}/config/database-credentials.template\nwq\n'" \
        || return $?
}

database-exists-p ()
{
    local -n settings=$1

    $SUDO_CMD -i -u "${settings[app-owner]}" RAILS_ENV=production \
          "${profile[app-dir]}/bin/rake" -C "${settings[app-dir]}" db:exists?
}

database-contains-admin-p ()
{
    local -n settings=$1

    $SUDO_CMD -i -u "${settings[app-owner]}" RAILS_ENV=production \
        "${profile[app-dir]}/bin/rake" -C "${settings[app-dir]}" db:contains_admin?
}

create-app-database ()
{
    local -n profile=$1

    # It's okay to try creating an existing database...
    # if database-exists-p profile; then
    #     return
    # fi

    local -a databases=()
    local database=''

    # Assert: Database names are suffixed with environment (i.e., _production).
    mapfile -t databases < <(
        $ED_CMD -sEe '/^production:/;$g/^  ([^ :]+):/s//\1/p' \
                "${profile[app-dir]}/config/database.yml"
    )

    echo "Creating app databases..." >&2
    for database in "${databases[@]}"; do
        $SUDO_CMD -i -u "${profile[app-owner]}" RAILS_ENV=production \
            "${profile[app-dir]}/bin/rake" -C "${profile[app-dir]}" "db:create:${database}" \
            || return $?
    done
}

load-database-schema ()
{
    local -n profile=$1

    local -a databases=()
    local database=''

    # Assert: Database names are suffixed with environment (i.e., _production).
    mapfile -t databases < <(
        $ED_CMD -sEe '/^production:/;$g/^  ([^ :]+):/s//\1/p' \
                "${profile[app-dir]}/config/database.yml"
    )

    echo "Running database migrations..." >&2
    for database in "${databases[@]}"; do
        $SUDO_CMD -i -u "${profile[app-owner]}" RAILS_ENV=production \
            "${profile[app-dir]}/bin/rake" -C "${profile[app-dir]}" "db:migrate:${database}" \
            || return $?
    done

}

seed-app-database ()
{
    local -n profile=$1

    if database-exists-p profile && database-contains-admin-p profile; then
        return
    fi

    echo "Attempting to seed app database..." >&2
    $SUDO_CMD -i -u "${profile[app-owner]}" RAILS_ENV=production \
        "${profile[app-dir]}/bin/rake" -C "${profile[app-dir]}" db:seed \
        || true
}

precompile-assets ()
{
    local -n profile=$1

    echo "Precompiling assets..." >&2
    $SUDO_CMD -i -u "${profile[app-owner]}" \
          RAILS_ENV=production "${profile[app-dir]}/bin/rake" -C "${profile[app-dir]}" assets:precompile \
        || return $?

    case "${profile[release-id]}" in
        almalinux|centos|fedora|rhel|rocky)
            $SUDO_CMD $SEMANAGE_CMD fcontext -a -t httpd_sys_content_t "${profile[app-dir]}/public/assets(/.*)?"
            $SUDO_CMD $RESTORECON_CMD -RF "${profile[app-dir]}/public/assets"
            ;;
        *suse*)
            # XXX: Apparmor
            ;;
        *)
            echo "${settings[release-id]}: Unsupported OS ID" >&2
            return 1
            ;;
    esac
}

adjust-path-permissions ()
{
    local -n profile=$1

    echo "Adjusting path permissions..." >&2
    $CHMOD_CMD 0711 "${profile[app-parent-dir]}"
    $CHMOD_CMD 0711 "${profile[app-dir]}"
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    declare script=$($READLINK_CMD -e "$0")
    declare script_name=${script##*/}
    declare script_dir=${script%/*}

    declare default_state_file=${script_dir}/.deploy-state

    source /etc/os-release

    declare -A local_profile=(
        [app-name]=$1
        [app-owner]=$2
        [state-file]=${3:-"$default_state_file"}
        [release-id]=$ID
    )

    if (( UID != 0 )); then
        echo "${script_name}: This script must be run as user \`root'." >&2
        exit 1
    fi

    initialize-profile local_profile || exit $?
    install-ruby-dependencies local_profile || exit $?
    install-node-dependencies local_profile || exit $?
    generate-rails-credentials local_profile || exit $?
    run-once create-app-database local_profile || exit $?
    load-database-schema local_profile || exit $?
    run-once seed-app-database local_profile || exit $?
    precompile-assets local_profile || exit $?
    adjust-path-permissions local_profile || exit $?
fi
